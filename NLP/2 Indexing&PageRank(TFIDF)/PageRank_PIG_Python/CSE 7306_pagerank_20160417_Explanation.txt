-- PR(A) = (1-d)/N + d (PR(T1)/C(T1) + ... + PR(Tn)/C(Tn))
-- PR(Tn) – Each page has a notion of its own self-importance. That's "PR(T1)" for the first page in the web all the way up to "PR(Tn)" for the last page
-- C(Tn) – Each page spreads its vote out evenly amongst all of it's outgoing links. The count, or number, of outgoing links for page 1 is "C(T1)", "C(Tn)" for page n, and so on for all pages.
-- PR(Tn)/C(Tn) – so if our page (page A) has a backlink from page "n" the share of the vote page A will get is "PR(Tn)/C(Tn)"


previous_pagerank = 
    LOAD '/tmp/pg/Link' 
    USING PigStorage('\t') 
    AS ( url: chararray, pagerank: float, links:{ link: ( url: chararray ) } );

previous_pagerank: {url: chararray,pagerank: float,links: {link: (url: chararray)}}
	
www.A.com	1	{ (www.B.com), (www.C.com), (www.D.com), (www.E.com) }
www.B.com	1	{ (www.D.com), (www.E.com) }
www.C.com	1	{ (www.D.com) }
www.D.com	1	{ (www.B.com) }
www.E.com	1	{ (www.A.com) }
www.F.com	1	{ (www.B.com), (www.C.com) }	
	
	
outbound_pagerank = 
    FOREACH previous_pagerank 
    GENERATE 
        pagerank / COUNT ( links ) AS pagerank, 
        FLATTEN ( links ) AS to_url; 

outbound_pagerank: {pagerank: float,to_url: chararray}	
		
(0.25,www.B.com)
(0.25,www.C.com)
(0.25,www.D.com)
(0.25,www.E.com)
(0.5,www.D.com)
(0.5,www.E.com)
(1.0,www.D.com)
(1.0,www.B.com)
(1.0,www.A.com)
(0.5,www.B.com)
(0.5,www.C.com)
		
temp = COGROUP outbound_pagerank BY to_url, previous_pagerank BY url INNER;
temp: {group: chararray,
       outbound_pagerank: {(pagerank: float,
	                        to_url: chararray)},
	   previous_pagerank: {(url: chararray,
	                        pagerank: float,
							links: {link: (url: chararray)})}}
		
(www.A.com,{(1.0,www.A.com)},{(www.A.com,1.0,{(www.B.com),(www.C.com),(www.D.com),(www.E.com)})})
(www.B.com,{(0.25,www.B.com),(1.0,www.B.com),(0.5,www.B.com)},{(www.B.com,1.0,{(www.D.com),(www.E.com)})})
(www.C.com,{(0.25,www.C.com),(0.5,www.C.com)},{(www.C.com,1.0,{(www.D.com)})})
(www.D.com,{(0.25,www.D.com),(0.5,www.D.com),(1.0,www.D.com)},{(www.D.com,1.0,{(www.B.com)})})
(www.E.com,{(0.25,www.E.com),(0.5,www.E.com)},{(www.E.com,1.0,{(www.A.com)})})
(www.F.com,{},{(www.F.com,1.0,{(www.B.com),(www.C.com)})})
		
		
new_pagerank = FOREACH temp
		GENERATE 
        group AS url, 
        (( 1 - $d )/6) + 0.5 * SUM ( outbound_pagerank.pagerank ) AS pagerank, 
        FLATTEN ( previous_pagerank.links ) AS links;

new_pagerank: {url: chararray,pagerank: double,links: {link: (url: chararray)}}
     
(www.A.com,1.0,{(www.B.com),(www.C.com),(www.D.com),(www.E.com)})
(www.B.com,1.375,{(www.D.com),(www.E.com)})
(www.C.com,0.875,{(www.D.com)})
(www.D.com,1.375,{(www.B.com)})
(www.E.com,0.875,{(www.A.com)})
(www.F.com,,{(www.B.com),(www.C.com)})



pig PageRank.py